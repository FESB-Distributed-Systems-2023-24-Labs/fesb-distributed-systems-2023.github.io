"use strict";(self.webpackChunkdistributed_systems=self.webpackChunkdistributed_systems||[]).push([[634],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=u(n),c=o,f=m["".concat(i,".").concat(c)]||m[c]||p[c]||a;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6213:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={},s="Controller Example",l={unversionedId:"labs/Lab 5 - HTTP Programming/Controller Example",id:"labs/Lab 5 - HTTP Programming/Controller Example",title:"Controller Example",description:"Table of Contents",source:"@site/docs/labs/05.Lab 5 - HTTP Programming/Controller Example.md",sourceDirName:"labs/05.Lab 5 - HTTP Programming",slug:"/labs/Lab 5 - HTTP Programming/Controller Example",permalink:"/docs/labs/Lab 5 - HTTP Programming/Controller Example",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lesson",permalink:"/docs/labs/Lab 4 - Communication Protocols/Lesson"},next:{title:"Creating a Web API",permalink:"/docs/labs/Lab 5 - HTTP Programming/Creating a Web API"}},i={},u=[{value:"<strong>Table of Contents</strong>",id:"table-of-contents",level:2},{value:"<strong>StudentController.cs</strong>",id:"studentcontrollercs",level:3}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controller-example"},"Controller Example"),(0,o.kt)("h1",{id:"lab-5-http-programming"},"Lab 5: HTTP Programming"),(0,o.kt)("h2",{id:"table-of-contents"},(0,o.kt)("strong",{parentName:"h2"},"Table of Contents")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#controller-example"},"Controller Example")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#lab-5-http-programming"},"Lab 5: HTTP Programming"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#table-of-contents"},(0,o.kt)("strong",{parentName:"a"},"Table of Contents")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#studentcontrollercs"},(0,o.kt)("strong",{parentName:"a"},"StudentController.cs")))))))),(0,o.kt)("h3",{id:"studentcontrollercs"},(0,o.kt)("strong",{parentName:"h3"},"StudentController.cs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace pkaselj_lab_05_template.Controllers\n{\n    // Delete the line below !!!\n    // [Route("api/[controller]")]\n    [ApiController]\n    public class StudentController : ControllerBase\n    {\n        // A sample list of students\n        readonly IEnumerable<string> students = new[] { "Ante", "Ivo", "Mate" };\n\n        // An endpoint that returns a list of all students\n        // Postman request (example): GET http://localhost:5236/all-students\n        // Postman response (example): ["Ante", "Ivo", "Mate"]\n        [HttpGet]\n        [Route("/all-students")]\n        public IActionResult GetStudents()\n        {\n            return Ok(students);\n        }\n\n        // An endpoint that returns the name of a student at index `id` (index in an array `students`)\n        // Postman request (example): GET http://localhost:5236/student/1\n        // Postman response (example): "Ivo"\n        //       * It returns "Ivo" because Ivo is at student[1] (see the top of the StudentController)\n        [HttpGet]\n        [Route("/student/{index}")]\n        public IActionResult GetStudentByIndexFromRoute([FromRoute] int index)\n        {\n            // Check if `id` is larger that number of students\n            // If you have 3 students ["Ante", "Ivo", "Mate"]\n            // You only have 3 indices in the `student` array:\n            //  student[0] = "Ante"\n            //  student[1] = "Ivo"\n            //  student[2] = "Mate"\n            if (index < students.Count())\n            {\n                // `index` is valid (between 0 and 2)\n                // Return 200 OK status and the name of the student at `index`\n                return Ok( students.ElementAt(index) );\n            }\n            else\n            {\n                // `index` is invalid. For example, we have 3 students and `index` is 145\n                // Return 400 Bad Request status code and a message\n                return BadRequest($"Invalid index = {index}. There are only {students.Count()} students.");\n            }\n        }\n\n        // An endpoint that returns the name of a student at index `id` (index in an array `students`)\n        // Postman request (example): GET http://localhost:5236/student?index=1\n        // Postman response (example): "Ivo"\n        //       * It returns "Ivo" because Ivo is at student[1] (see the top of the StudentController)\n        [HttpGet]\n        [Route("/student")]\n        public IActionResult GetStudentByIndexFromQuery([FromQuery] int index)\n        {\n            if (index < students.Count())\n            {\n                return Ok(students.ElementAt(index));\n            }\n            else\n            {\n                return BadRequest($"Invalid index = {index}. There are only {students.Count()} students.");\n            }\n        }\n\n        // An endpoint that returns the name of a student at index `id` (index in an array `students`)\n        // Postman request (example): POST http://localhost:5236/student\n        //       * Set POST method\n        //       * Go to Postman > Headers and add "Content-Type" header with value "application/json"\n        //       * Go to Postman > Body and select "raw" and "text" and type \'1\' (WITHOUT the quotes)\n        // Postman response (example): "Ivo"\n        //       * It returns "Ivo" because Ivo is at student[1] (see the top of the StudentController)\n        [HttpPost]\n        [Route("/student")]\n        public IActionResult GetStudentByIndexFromBody([FromBody] int index)\n        {\n            if (index < students.Count())\n            {\n                return Ok(students.ElementAt(index));\n            }\n            else\n            {\n                return BadRequest($"Invalid index = {index}. There are only {students.Count()} students.");\n            }\n        }\n    }\n}\n\n')))}p.isMDXComponent=!0}}]);